{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","Keypair","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","useState","isWallet","wallet","setWallet","loading","setLoading","inputValue","setInputValue","gifList","setGifList","getProvider","connection","Connection","Provider","window","solana","getGifList","a","provider","program","Program","account","fetch","publicKey","createGifAccount","rpc","initialize","accounts","user","systemProgram","programId","signers","checkIfWalletIsisWallet","notification","error","message","description","isPhantom","connect","onlyIfTrusted","toString","connectWallet","sendGif","event","preventDefault","length","addGif","success","onChangeInput","target","value","useEffect","onLoad","addEventListener","removeEventListener","className","onClick","disabled","onSubmit","type","placeholder","onChange","map","gif","index","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5cbc1496.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport {notification} from \"antd\";\nimport { useEffect, useState } from  'react';\nimport idl from \"./idl.json\"\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport kp from './keypair.json'\n\n// WEB 3\nconst {SystemProgram, Keypair}  = web3;\n// let baseAccount = Keypair.generate();\nlet arr = Object.values(kp._keypair.secretKey);\n// console.log(arr)\nlet secret = new Uint8Array(arr);\n// console.log(secret)\nconst baseAccount = Keypair.fromSecretKey(secret)\nconst programID =  new PublicKey(idl.metadata.address);\nconst network = clusterApiUrl('devnet');\nconst opts = {\n  preflightCommitment: \"processed\" //can be procedded | finalized\n}\n\n// WEB 3 Functions\n\n\n\n// Constants\nconst TWITTER_HANDLE = 'HenshawSamuel';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n\nconst TEST_GIFS = [\n\t\"https://media1.giphy.com/media/ADSJHOoIvyjKM/giphy.gif?cid=ecf05e47zmmdelzaax8jgupg3qnpx1lblqe059k5ehvn02ew&rid=giphy.gif&ct=g\",\n\t\"https://media0.giphy.com/media/OkhbcKxPDCKli/giphy.gif?cid=ecf05e47v2g43r8tfdfv700uqvesofvu3yhpyrxsa9cg7fcf&rid=giphy.gif&ct=g\",\n\t\"https://media2.giphy.com/media/wzWxTUiXRQDYc/giphy.gif?cid=ecf05e47d2xyp96y32if8ymylbiqk1z1gk1inxs9qecxpqap&rid=giphy.gif&ct=g\",\n\t\"https://media2.giphy.com/media/2y98KScHKeaQM/giphy.gif?cid=ecf05e47no3h1m39189fjq1mcgl3kssssg5o1trhxlephn66&rid=giphy.gif&ct=g\"\n]\n\n\nconst App = () => {\n\n  // REACT STATE\n  const [wallet, setWallet] = useState({isWallet: false, address: null})\n  const [loading, setLoading] = useState(false)\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider\n  }\n  \n  const getGifList =  async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider)\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\n      // console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n    } catch (error) {\n      // console.log(\"Error in getGifList: \", error)\n      setGifList(null);\n    }\n  }\n\n  \n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n     \n      await program.rpc.initialize({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      // console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n  \n    } catch(error) {\n      // console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  const checkIfWalletIsisWallet = async () => {\n      try {\n        const {solana} = window;\n\n        if(!solana) {\n          setWallet({...wallet, isWallet: false})\n          return notification.error({message: \"\", description: \"Solana object not found! Get a Phantom Wallet ðŸ‘»\"})\n        }\n\n        if(solana.isPhantom){\n          \n          const {publicKey} = await solana.connect({onlyIfTrusted: true});\n          setWallet({isWallet: true, address: publicKey.toString()})\n          // console.log(\"Connected to Phantom Wallet\")\n          // console.log(\"publicKey: \", publicKey.toString())\n        }\n      } catch (error) {\n          // console.log(error)\n          setWallet({...wallet, isWallet: false})\n          notification.error({message: \"\", description: \"App could not connect to wallet\"});\n      }\n  }\n\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    try {\n      setLoading(true)\n      if (solana) {\n        const {publicKey} = await solana.connect();\n        // console.log('isWallet with Public Key:', publicKey.toString());\n        setWallet({address: publicKey.toString(), isWallet: true});\n        // console.log(\"publicKey: \", publicKey.toString())\n      }\n    } catch (error) {\n        notification.error({message: \"\", description: \"could not connect to wallet\"})\n    }finally {\n      setLoading(false)\n    }\n  };\n\n  const sendGif = async (event) => {\n    event.preventDefault()\n    setLoading(true)\n    if (inputValue.length === 0) {\n      // console.log(\"No gif link given!\")\n      notification.error({message: \"\", description: \"No gif link given\"})\n      return\n    }\n\n      setInputValue(\"\")\n      // console.log(\"Gif link:\", inputValue)\n    \n      try {\n          const provider = getProvider();\n          const program = new Program(idl, programID, provider);\n\n          await program.rpc.addGif(inputValue, {\n            accounts: {\n              baseAccount: baseAccount.publicKey,\n              user: provider.wallet.publicKey\n            }\n          })\n\n          // console.log(\"GIF successfully sent to program\", inputValue)\n\n          await getGifList();\n          notification.success({message: \"\", description: \"GIF successfully sent to program\"})\n      } catch (error) {\n        // console.log(\"Error sending GIF:\", error)\n        notification.error({message: \"\", description: \"GIF successfully sent to program\"})\n\n      }finally {\n        setLoading(false)\n      }\n  }\n\n\n\n  const onChangeInput = (event) => {\n    setInputValue(event.target.value)\n  }\n\n\n  const renderNotisWalletContainer = () => (\n    <button className=\"cta-button connect-wallet-button\" onClick={connectWallet} disabled={loading}>\n      {loading ? ( <span> <i className='spinner-border spinner-border-sm'></i> connecting to wallet...</span> ) : \"Connect to Wallet\"}\n    </button>\n  );\n\n  const renderConnectedContainer = () => (\n    gifList == null ?\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n    :\n        <div className=\"connected-container\">\n          <form onSubmit={sendGif}>\n            <input type=\"text\" placeholder=\"Enter gif link!\" onChange={onChangeInput} value={inputValue} />\n            <button disabled={loading} type=\"submit\" className=\"cta-button submit-gif-button\"> \n              {loading && <i className=\"spinner-border spinner-border-sm\"  > </i>} Submit\n            </button>\n        </form>\n          <div className=\"gif-grid\">\n            {gifList.map((gif, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={gif.gifLink} alt={gif} />\n              </div>\n            ))}\n          </div>\n        </div>\n  )\n\n  \n\n  useEffect(() => { \n    // console.log(\"running\");\n\n     const onLoad = async () => {\n        await checkIfWalletIsisWallet();\n     } \n     window.addEventListener('load', onLoad);\n     \n\n     return () => {\n       window.removeEventListener('load', onLoad);\n     }\n    \n  }, []);\n\n  useEffect(() => {\n    if(wallet.address){\n      // console.log('Fetching GIF list...');\n      getGifList()\n    }\n  }, [wallet.address])\n\n\n  return (\n    <div className=\"App py-5\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n           <p className={` ${wallet.isWallet ? \"text-success\" : \"text-danger\"}`}>\n             {wallet.isWallet ? \"ðŸ˜‡ Connected to Wallet \" : \"ðŸ˜Ÿ No Wallet Detected\"}\n            </p>\n         \n          <p className=\"header\">ðŸ–¼ Henshaw GIF Portal</p>\n          <p className=\"sub-text\">\n            View your GIF collection in the metaverse âœ¨\n          </p>\n          {!wallet.address && renderNotisWalletContainer()}\n          {wallet.address && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}